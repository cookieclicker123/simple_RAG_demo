[project]
name = "simple_rag_pipeline"
version = "0.1.0"
description = "A simple RAG (Retrieval Augmented Generation) pipeline for QA over documents, evolving into a multi-agent system."
authors = [
    {name = "Your Name", email = "you@example.com"},
]
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Indexing",
]

dependencies = [
    "langchain>=0.1.0,<0.2.0",          # Core RAG and LLM interaction logic
    "llama-index>=0.10.0,<0.11.0",      # Document processing, indexing, and RAG components
    "llama-index-core>=0.10.0,<0.11.0", # Often a peer to llama-index itself
    "llama-index-embeddings-huggingface>=0.2.0,<0.3.0", # For local embeddings
    "llama-index-vector-stores-faiss>=0.1.2,<0.2.0", # Explicit FAISS vector store integration
    "openai>=1.0.0,<2.0.0",             # OpenAI LLM client
    "pydantic>=2.0.0,<3.0.0",           # Data validation and settings management
    "pydantic-settings>=2.0.0,<3.0.0",  # For loading settings from .env and environment
    "python-dotenv>=1.0.0,<2.0.0",      # For loading environment variables (e.g., API keys)
    "faiss-cpu>=1.7.0,<1.8.0",          # Local vector store (CPU version)
    "sentence-transformers>=2.2.0,<3.0.0", # Explicitly needed by HuggingFaceEmbedding
    "PyPDF2>=3.0.0,<4.0.0",             # For PDF parsing, if not fully handled by LlamaIndex's default readers
                                        # LlamaIndex has SimpleDirectoryReader which handles PDFs.
                                        # We can refine this if specific PDF features are needed.
    "google-adk>=0.1.0,<0.2.0",          # Added Google Agent Development Kit
    # Consider adding `uv` itself here if it makes sense for project-specific tasks, though it's usually a global tool.
    # For CLIs, consider libraries like Typer or Click if complexity grows.
    # "typer>=0.9.0,<0.10.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0,<8.0.0",
    "ruff>=0.1.0,<0.2.0", # Linter and formatter
]

[project.scripts]
# We can define CLI entry points here later if we structure the app as an installable package
# index-docs = "simple_rag_pipeline.app.indexer_cli:main"
# chat-rag = "simple_rag_pipeline.app.chat_cli:main"

[tool.ruff]
line-length = 88
select = ["E", "F", "W", "I", "UP", "PL", "N", "C4", "T20", "SIM", "PTH", "ERA", "PIE", "Q"]
ignore = ["E501"] # Handled by formatter

[tool.ruff.format]
quote-style = "double"

[tool.uv] # Placeholder for any uv-specific configurations if they arise
# e.g. tool.uv.sources for custom package indexes

# Add this if you want to make your src directory importable as 'simple_rag_pipeline'
[tool.setuptools.packages.find]
where = ["src"] 